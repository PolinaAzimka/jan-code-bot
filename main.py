import logging
import requests
from telegram import Update
from telegram.ext import ApplicationBuilder, MessageHandler, filters, ContextTypes

API_URL = "https://api.ocr.space/parse/image"
API_KEY = "K83263040588957"  # üîë –¢–≤–æ–π –∫–ª—é—á

logging.basicConfig(level=logging.INFO)

BOT_TOKEN = "7587391633:AAHyIMZ5VKOTQBFuJjyENBg099xX7mQf94bY"

async def handle_photo(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("–§–æ—Ç–æ –ø–æ–ª—É—á–µ–Ω–æ! –†–∞—Å–ø–æ–∑–Ω–∞—é —Ç–µ–∫—Å—Ç...")

    photo_file = await update.message.photo[-1].get_file()
    photo_bytes = await photo_file.download_as_bytearray()

    response = requests.post(
        API_URL,
        files={"filename": ("image.jpg", photo_bytes)},
        data={"language": "jpn", "isOverlayRequired": False},
        headers={"apikey": API_KEY},  # üîë –ò—Å–ø–æ–ª—å–∑—É–µ–º API-–∫–ª—é—á
    )

    try:
        result = response.json()
        parsed_results = result.get("ParsedResults")
        if parsed_results:
            parsed_text = parsed_results[0].get("ParsedText", "")
            if parsed_text.strip():
                await update.message.reply_text(f"–†–∞—Å–ø–æ–∑–Ω–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç:\n{parsed_text}")
            else:
                await update.message.reply_text("–ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å —Ç–µ–∫—Å—Ç.")
        else:
            await update.message.reply_text("–û—à–∏–±–∫–∞: –Ω–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è.")
    except Exception as e:
        await update.message.reply_text(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ: {str(e)}")

app = ApplicationBuilder().token(BOT_TOKEN).build()
app.add_handler(MessageHandler(filters.PHOTO, handle_photo))

if __name__ == "__main__":
    app.run_polling()
